struct struct1 {
  f1:int
  f2:&int
}

struct struct2 {
  f1:struct1
  f2:&struct1
}

func1:&() -> int
func2:&(int, &int) -> &struct2
func3:&(int) -> _
g1:int
g2:&int
g3:&&int

extern ext1:() -> int
extern ext2:(int) -> int
extern ext3:(&int, int) -> &int

fn func1() -> int {
entry:
  $ret 42
}

fn func2(p1:int, p2:&int) -> &struct2 {
let _t1:&struct2, x:struct2
entry:
  _t1 = $addrof x
  $ret _t1
}

fn func3(p:int) -> _ {
entry:
  $ret 
}

fn main() -> int {
let _t1:&struct1, _t10:&&&&(int) -> _, _t11:&&&&(int) -> _, _t12:&&&(int) -> _, _t13:&int, _t14:int, _t15:&&&int, _t16:&&int, _t17:&int, _t18:&int, _t19:int, _t2:&&int, _t20:&struct2, _t21:int, _t22:&struct2, _t23:&&&(int) -> _, _t24:&&(int) -> _, _t25:&(int) -> _, _t26:int, _t3:&int, _t4:int, _t5:int, _t6:&&&struct2, _t7:&&struct2, _t8:int, _t9:&&&&&(int) -> _, id0:&int, id1:&struct1, id10:&() -> int, id11:&() -> int, id12:&() -> int, id13:int, id2:struct1, id3:&&&int, id4:&struct1, id5:&&struct2, id6:&&&struct2, id7:&struct2, id8:&&&(int) -> _, id9:&&&&&(int) -> _
bb1:
  _t9 = $gep id9 _t8
  _t10 = $load _t9
  _t11 = $gep _t10 id13
  _t12 = $load _t11
  id8 = $copy _t12
  $call_dir func1() then bb2

bb2:
  _t13 = $gfp id4 f1
  _t14 = $load _t13
  _t15 = $gep id3 _t14
  _t16 = $load _t15
  _t17 = $load _t16
  id0 = $copy _t17
  _t18 = $load g3
  _t19 = $load _t18
  _t20 = $alloc _t19 [_alloc1]
  $store id5 _t20
  _t21 = $call_dir func1() then bb3

bb3:
  _t22 = $call_dir func2(_t21, id0) then bb4

bb4:
  id7 = $copy _t22
  _t23 = $gep id8 0
  _t24 = $load _t23
  _t25 = $load _t24
  $call_idr _t25(g1) then bb5

bb5:
  _t26 = $call_idr id10() then bb6

bb6:
  $ret _t26

entry:
  _t1 = $addrof id2
  id1 = $copy _t1
  _t2 = $gfp id1 f2
  _t3 = $load _t2
  id0 = $copy _t3
  id3 = $copy 0
  id4 = $copy 0
  id6 = $copy id6
  _t4 = $call_ext ext1()
  _t5 = $call_ext ext2(_t4)
  _t6 = $gep id6 _t5
  _t7 = $load _t6
  id5 = $copy _t7
  id7 = $copy 0
  id9 = $copy id9
  id12 = $copy id12
  id11 = $copy id12
  id10 = $copy id11
  id13 = $copy g1
  _t8 = $call_idr id10() then bb1
}

