struct struct1 {
  f1:int
  f2:&int
}

struct struct2 {
  f1:struct1
  f2:&struct1
}

func1:&() -> int
func2:&(int, &int) -> &struct2
func3:&(int) -> _
g1:int
g2:&int
g3:&&int

extern ext1:() -> int
extern ext2:(int) -> int
extern ext3:(&int, int) -> &int

fn func1() -> int {
entry:
  $ret 42
}

fn func2(p1:int, p2:&int) -> &struct2 {
let _t1:&struct2, x:struct2
entry:
  _t1 = $addrof x
  $ret _t1
}

fn func3(p:int) -> _ {
entry:
  $ret 
}

fn main() -> int {
let _lo1:int, _t2:&struct2, _t3:int, _t4:int, _t5:int, _t6:&&struct1, _t7:&struct1, _t8:&int, _t9:int, id0:&int, id1:&struct2, id2:struct2, id3:struct2, id4:struct2
bb1:
  g1 = $copy _lo1
  _t4 = $call_dir func1() then bb4

bb2:
  _lo1 = $copy 0
  $jump bb1

bb3:
  _lo1 = $copy 1
  $jump bb1

bb4:
  _t5 = $arith sub 0 _t4
  g1 = $copy _t5
  g1 = $copy 0
  _t6 = $gfp id1 f2
  _t7 = $load _t6
  _t8 = $gfp _t7 f1
  _t9 = $load _t8
  $ret _t9

entry:
  id0 = $copy 0
  id4 = $copy id4
  id3 = $copy id4
  id2 = $copy id3
  _t2 = $addrof id2
  id1 = $copy _t2
  _t3 = $load id0
  $branch _t3 bb2 bb3
}

