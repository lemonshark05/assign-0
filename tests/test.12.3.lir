struct struct1 {
  f1:int
  f2:&struct1
}

func1:&(int) -> int
func12:&(int) -> _
func2:&(&int) -> &struct1
func22:&(&int) -> _
func3:&(&int, &&int) -> int
func32:&(&int, &&int) -> _
g1:&struct1

extern ext1:() -> int
extern ext2:(int) -> _
extern ext3:(&int) -> _

fn func1(s:int) -> int {
let x:int, y:&int, z:&struct1
entry:
  $ret s
}

fn func12(s:int) -> _ {
let x:int, y:&int, z:&struct1
entry:
  $ret 
}

fn func2(p:&int) -> &struct1 {
let _t1:&int, _t2:int, x:&struct1
entry:
  x = $alloc 12 [_alloc1]
  _t1 = $gfp x f1
  _t2 = $load p
  $store _t1 _t2
  $ret x
}

fn func22(p:&int) -> _ {
let _t1:&int, _t2:int, x:&struct1
entry:
  x = $alloc 12 [_alloc2]
  _t1 = $gfp x f1
  _t2 = $load p
  $store _t1 _t2
  $ret 
}

fn func3(q:&int, r:&&int) -> int {
let _t1:&int, _t2:int
entry:
  _t1 = $load r
  $store _t1 42
  _t2 = $load q
  $ret _t2
}

fn func32(q:&int, r:&&int) -> _ {
let _t1:&int
entry:
  _t1 = $load r
  $store _t1 42
  $ret 
}

fn main() -> int {
let _lo1:int, _t10:&int, _t11:int, _t12:&&struct1, _t13:&struct1, _t14:&&&int, _t15:&&int, _t16:&int, _t17:&int, _t18:int, _t19:&&int, _t2:&&int, _t20:&&int, _t21:int, _t22:int, _t3:&int, _t4:&&&struct1, _t5:&&struct1, _t6:&int, _t7:int, _t8:&int, _t9:int, id0:&(int) -> int, id1:int, id10:&int, id2:&int, id3:&&struct1, id4:&&struct1, id5:&&struct1, id6:int, id7:&int, id8:&int, id9:&&int
bb1:
  id2 = $alloc 1 [_alloc3]
  _t11 = $cmp neq id3 id3
  id1 = $copy _t11
  $store id5 0
  $call_dir func2(id2) then bb2

bb2:
  _t12 = $gep id4 id1
  _t13 = $alloc id6 [_alloc4]
  $store _t12 _t13
  _t14 = $addrof id9
  _t15 = $load _t14
  _t16 = $load _t15
  $call_dir func2(_t16) then bb3

bb3:
  _t17 = $gfp g1 f1
  _t18 = $load _t17
  id6 = $copy _t18
  _t19 = $addrof id2
  _t20 = $addrof id10
  _t21 = $cmp neq _t19 _t20
  $branch _t21 bb5 bb6

bb4:
  _t22 = $cmp gt _lo1 1
  $ret _t22

bb5:
  _lo1 = $copy 0
  $jump bb4

bb6:
  _lo1 = $copy 1
  $jump bb4

entry:
  id0 = $copy id0
  id1 = $copy 7
  _t2 = $addrof id2
  _t3 = $load _t2
  id2 = $copy _t3
  id3 = $copy id4
  _t4 = $addrof id3
  _t5 = $load _t4
  id5 = $copy _t5
  _t6 = $addrof id1
  id8 = $copy _t6
  id7 = $copy id8
  _t7 = $call_ext ext1()
  _t8 = $gep id7 _t7
  _t9 = $load _t8
  id6 = $copy _t9
  id9 = $copy id9
  _t10 = $addrof id1
  id10 = $copy _t10
  $call_idr id0(id1) then bb1
}

