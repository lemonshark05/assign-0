struct struct1 {
  f1:int
  f2:&int
}

struct struct2 {
  f1:struct1
  f2:&struct1
}

func1:&() -> int
func2:&(int, &int) -> &struct2
func3:&(int) -> _
g1:int
g2:&int
g3:&&int

extern ext1:() -> int
extern ext2:(int) -> int
extern ext3:(&int, int) -> &int

fn func1() -> int {
entry:
  $ret 42
}

fn func2(p1:int, p2:&int) -> &struct2 {
let _t1:&struct2, x:struct2
entry:
  _t1 = $addrof x
  $ret _t1
}

fn func3(p:int) -> _ {
entry:
  $ret 
}

fn main() -> int {
let _t1:&int, _t2:&int, _t3:int, _t4:int, id0:&&int, id1:&struct1, id2:int, id3:&() -> int, id4:&() -> int
bb1:
  id2 = $copy _t3
  _t4 = $call_idr id3() then bb2

bb2:
  $ret _t4

entry:
  id0 = $copy g3
  id1 = $copy id1
  id2 = $copy id2
  id4 = $copy func1
  id3 = $copy id4
  id0 = $alloc 1 [_alloc1]
  _t1 = $gep g2 8
  $store _t1 g1
  _t2 = $gfp id1 f1
  $store _t2 g1
  $call_ext ext1()
  _t3 = $call_dir func1() then bb1
}

